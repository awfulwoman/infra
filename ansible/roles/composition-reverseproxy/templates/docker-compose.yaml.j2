# code: language=ansible
name: "{{ composition_name }}"
services:
  catch-all:
    image: nginx:1.28-alpine
    volumes:
      - "{{ composition_config }}/nginx/catch-all.conf:/etc/nginx/nginx.conf:ro"
      - "{{ composition_config }}/www-catch-all:/usr/share/nginx/html:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.catch-all-service.loadbalancer.server.port=80"
      # Use as "fallback" for any unknown URL (with lowest possible priority).
      - "traefik.http.routers.catch-all-router.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.catch-all-router.priority=1"
      - "traefik.http.routers.catch-all-router.entryPoints=web"

  status-pages:
    image: nginx:1.28-alpine
    volumes:
      - "{{ composition_config }}/nginx/status-pages.conf:/etc/nginx/nginx.conf:ro"
      - "{{ composition_config }}/www-status-pages:/usr/share/nginx/html:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.status-pages-service.loadbalancer.server.port=80"
      - "traefik.http.routers.status-pages-router.rule=Host(`error.localhost`)"
      - "traefik.http.routers.status-pages-router.entryPoints=web"
      # Configure the error middleware for specific status codes.
      - "traefik.http.middlewares.status-pages-middleware.errors.status=400,401,403-405,407-413,416,418,429,500,502-505"
      - "traefik.http.middlewares.status-pages-middleware.errors.service=status-pages-service"
      - "traefik.http.middlewares.status-pages-middleware.errors.query=/{status}.html"

  whoami:
    container_name: whoami
    ports:
      - "127.0.0.1:8888:80"
    image: traefik/whoami
    restart: unless-stopped
    env_file: .environment_vars
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.{{ ansible_hostname }}.{{ domain_name }}`)"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.certresolver=letsencrypt"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"

  reverseproxy:
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
    image: traefik:v3.5
    restart: unless-stopped
    env_file: .environment_vars
    labels:
      # Traefik-ception so that Traefik is provided via Traefik
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.backend=traefik"
      # Allow dashboard access via traefik.{{ansible_hostname}}.{{ domain_name }}
      - "traefik.http.routers.dashboard.rule=Host(`traefik.{{ ansible_hostname }}.{{ domain_name }}`)"
      - "traefik.http.routers.dashboard.service=dashboard@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      # Allow API access via traefik.{{ansible_hostname}}.{{ domain_name }}
      - "traefik.http.routers.api.rule=Host(`traefik.{{ ansible_hostname }}.{{ domain_name }}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/providers:/etc/traefik/providers"
      - "{{ composition_config }}/traefik.yaml:/etc/traefik/traefik.yaml"
      - "{{ composition_config }}/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"

networks:
  "{{ default_docker_network }}":
    external: true
