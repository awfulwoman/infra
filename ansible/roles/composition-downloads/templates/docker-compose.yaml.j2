# code: language=ansible
name: "{{ composition_name }}"
services:
  prowlarr:
    container_name: prowlarr
    ports:
      - "127.0.0.1:9696:9696"
    image: lscr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - "TZ=Europe/Berlin"      
      - PUID=1000
      - PGID=1000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ domain_name }}`)"
      - "traefik.http.routers.prowlarr.tls=true"
      - "traefik.http.routers.prowlarr.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/prowlarr:/config"
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    ports:
      - "127.0.0.1:6767:6767"
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - "TZ=Europe/Berlin"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.{{ domain_name }}`)"
      - "traefik.http.routers.bazarr.tls=true"
      - "traefik.http.routers.bazarr.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/bazarr:/config"
      - "{{ shared_media_path }}:/data"
    networks:
      - "{{ default_docker_network }}"

  radarr:
    container_name: radarr
    ports:
      - "127.0.0.1:7878:7878"
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - "TZ=Europe/Berlin"      
      - "PUID=1000"
      - "PGID=1000"
      - "UMASK=002"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ domain_name }}`)"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/radarr:/config"
      - "{{ shared_media_path }}:/data"
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"
    depends_on:
      - prowlarr
      - gluetun

  lidarr:
    container_name: lidarr
    ports:
      - "127.0.0.1:8686:8686"
    image: lscr.io/linuxserver/lidarr:latest
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - "TZ=Europe/Berlin"      
      - "PUID=1000"
      - "PGID=1000"
      - "UMASK=002"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.{{ domain_name }}`)"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/lidarr:/config"
      - "{{ shared_media_path }}:/data"
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"
    depends_on:
      - prowlarr
      - gluetun

  sonarr:
    container_name: sonarr
    ports:
      - "127.0.0.1:8989:8989"
    image: lscr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - "TZ=Europe/Berlin"      
      - PUID=1000
      - PGID=1000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ domain_name }}`)"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/sonarr:/config"
      - "{{ shared_media_path }}:/data"
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"
    depends_on:
      - prowlarr
      - gluetun

  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:latest
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - PUID=1000
      - PGID=1000
      - "TZ=Europe/Berlin"
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - "{{ composition_config }}/qbittorrent:/config"
      - "{{ composition_config }}/qbittorrent/vuetorrent:/vuetorrent"
      - "{{ shared_media_path }}/downloads/torrents:/data/downloads/torrents"
      - /etc/localtime:/etc/localtime:ro
    network_mode: "service:gluetun"
    depends_on:
      - gluetun

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - "{{ composition_config }}/transmission:/config"
      - "{{ shared_media_path }}/downloads/torrents:/downloads"
      - "{{ shared_media_path }}/downloads/torrents/watch:/watch"
    network_mode: "service:gluetun"
    depends_on:
      - gluetun
  
  gluetun:
    container_name: gluetun
    ports:
      - 8000:8000/tcp # Gluetun Control server
      - 127.0.0.1:8080:8080/tcp # Qbittorrent
      - 127.0.0.1:6881:6881/tcp # Qbittorrent
      - 127.0.0.1:6881:6881/udp # Qbittorrent
      - 127.0.0.1:9091:9091 # Transmission 
      - 127.0.0.1:51413:51413 # Transmission 
      - 127.0.0.1:51413:51413/udp # Transmission 
    cap_add:
      - NET_ADMIN
    image: qmcgaw/gluetun
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - VPN_SERVICE_PROVIDER=mullvad
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY="{{ vault_mullvad_wireguard_private_key }}"
      - WIREGUARD_ADDRESSES="{{ vault_mullvad_wireguard_ipaddress }}" # IPv4 only!
      - SERVER_CITIES=zurich
      - SERVER_COUNTRIES=switzerland
      - LOG_LEVEL=info
    devices:
      - /dev/net/tun
    labels:
      - "traefik.enable=true"
      # Gluetun Built-in HTTP control server
      - "traefik.http.routers.gluetun.rule=Host(`gluetun.{{ domain_name }}`)"
      - "traefik.http.routers.gluetun.service=gluetun"
      - "traefik.http.services.gluetun.loadbalancer.server.port=8000"
      - "traefik.http.routers.gluetun.tls=true"
      - "traefik.http.routers.gluetun.tls.certresolver=letsencrypt"
      # Qbittorrent
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.{{ domain_name }}`)"
      - "traefik.http.routers.qbittorrent.service=qbittorrent"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
      - "traefik.http.routers.qbittorrent.tls=true"
      - "traefik.http.routers.qbittorrent.tls.certresolver=letsencrypt"
      # Transmission
      - "traefik.http.routers.transmission.rule=Host(`transmission.{{ domain_name }}`)"
      - "traefik.http.routers.transmission.service=transmission"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.routers.transmission.tls.certresolver=letsencrypt"
    volumes:
      - "{{ composition_config }}/gluetun:/gluetun"
      - "{{ composition_config }}/gluetun/config.toml:/gluetun/auth/config.toml"
      - /etc/localtime:/etc/localtime:ro
    networks:
      - "{{ default_docker_network }}"

  librofm-downloader:
    container_name: librofm-downloader
    ports:
      - "127.0.0.1:13377:8080"
    image: ghcr.io/burntcookie90/librofm-downloader:latest
    restart: unless-stopped
    env_file: .environment_vars
    environment:
      - LIBRO_FM_USERNAME={{ vault_librofm_username }}
      - LIBRO_FM_PASSWORD={{ vault_librofm_password }}
      # extra optional: setting these enables them, dont add them if you dont want them. 
      - LOG_LEVEL=INFO
      - SYNC_INTERVAL=d
      - FORMAT=M4B_CONVERT_FALLBACK
      - AUDIO_QUALITY=128k
      - PATH_PATTERN=BOOK_TITLE
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librofm.rule=Host(`librofm.{{ domain_name }}`)"
      - "traefik.http.routers.librofm.tls=true"
      - "traefik.http.routers.librofm.tls.certresolver=letsencrypt"
    volumes:
      - "{{ shared_media_path }}/audiobooks:/media"
      - "{{ composition_config }}/librofm:/data"
    networks:
      - "{{ default_docker_network }}"

  libation:
    container_name: libation
    image: rmcrackan/libation:latest
    restart: unless-stopped
    env_file: .environment_vars
    user: 1000:1000
    environment:
      - SLEEP_TIME=360m
    volumes:
      - "{{ shared_media_path }}/audiobooks:/data"
      - "{{ composition_config }}/libation:/config"
    networks:
      - "{{ default_docker_network }}"

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    env_file: .environment_vars
    environment:
      # - LOG_LEVEL=debug
      - PORT=5055 #optional
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.{{ domain_name }}`)"
      - "traefik.http.routers.jellyseerr.tls=true"
      - "traefik.http.routers.jellyseerr.tls.certresolver=letsencrypt"
    ports:
      - "127.0.0.1:5055:5055"
    volumes:
      - "{{ shared_media_path }}/jellyseerr:/app/config"
    restart: unless-stopped

networks:
  "{{ default_docker_network }}":
    external: true
