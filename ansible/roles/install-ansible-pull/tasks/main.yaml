# NOTE
# If the machine has not been bootstrapped then this needs to be 
# run intially from a remote controller, due to installing 
# passwords and dependencies. After the initial run ansible-pull 
# will function as expected.

# - name: Ansible project dir
#   ansible.builtin.debug:
#     msg: "{{ ansiblepull_workdir }}"

- name: Ensure ansible password file exists
  become: true
  ansible.builtin.lineinfile:
    name: "{{ ansiblepull_workdir }}/.vaultpassword"
    line: "{{ vault_ansible_password }}"
    mode: "0644"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: present
    create: true

- name: Ensure Ansible work dir exists
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ ansiblepull_workdir }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"

- name: Ensure Galaxy Collections dir exists
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ ansiblepull_workdir }}/galaxy/collections"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"

- name: Ensure Galaxy Roles dir exists
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ ansiblepull_workdir }}/galaxy/roles"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"

- name: Ensure repo dir exists
  become: true
  ansible.builtin.file:
    dest: "{{ ansiblepull_repo_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"
    state: directory

- name: Clone initial copy of repo
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ ansiblepull_repo_path }}"
    clone: true
    update: true
  register: repo_installation_path
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Stat installed.lock
  ansible.builtin.stat:
    path: "{{ ansiblepull_workdir }}/{{ ansiblepull_initial_installer_lockfile_name }}"
  register: installlock_raw

- name: Register installation var
  ansible.builtin.set_fact:
    installed: "{{ installlock_raw.stat.exists }}"

# ansible-galaxy role install -r ansible/meta/requirements.yaml -p /opt/ansible/galaxy/roles/
# ansible-galaxy collection install -r ansible/meta/requirements.yaml -p /opt/ansible/galaxy/collections/

- name: Run Galaxy install - roles
  ansible.builtin.command: "ansible-galaxy role install -r {{ ansiblepull_repo_path }}/ansible/meta/requirements.yaml -p {{ ansiblepull_workdir }}/galaxy/roles"
  timeout: 3600 # stupidly long value because ansible-galaxy installation takes FOREVER
  # when: not installed

- name: Run requirements install - collections
  ansible.builtin.command: "ansible-galaxy collection install -r {{ ansiblepull_repo_path }}/ansible/meta/requirements.yaml -p {{ ansiblepull_workdir }}/galaxy/collections"
  timeout: 3600 # stupidly long value because ansible-galaxy installation takes FOREVER
  # when: not installed

- name: Mark initial install of galaxy as completed
  ansible.builtin.file:
    state: touch
    path: "{{ ansiblepull_workdir }}/{{ ansiblepull_initial_installer_lockfile_name }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"
  when: not installed

- name: Remove old Galaxy crons
  ansible.builtin.cron:
    name: "{{ item }}"
    state: absent
  loop:
    - ansible-galaxy
    - ansible-roles-galaxy
    - ansible-collections-galaxy

- name: Remove old repo locations
  ansible.builtin.file:
    path: "{{ item }}"
  loop:
    - /opt/home
    - "{{ ansiblepull_workdir }}/home"
    - "{{ ansiblepull_workdir }}/infra"

- name: Run Galaxy roles weekly
  ansible.builtin.cron:
    name: "ansible-galaxy-install-roles"
    job: "ansible-galaxy role install -r {{ ansiblepull_repo_path }}/ansible/meta/requirements.yaml -p {{ ansiblepull_workdir }}/galaxy/roles"
    state: present
    hour: "5"
    minute: "15"

- name: Run Galaxy collections weekly
  ansible.builtin.cron:
    name: "ansible-galaxy-install-collections"
    job: ansible-galaxy collection install -r {{ ansiblepull_repo_path }}/ansible/meta/requirements.yaml -p {{ ansiblepull_workdir }}/galaxy/collections
    state: present
    hour: "5"
    minute: "30"

- name: Ensure scripts are populated from templates
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ ansiblepull_workdir }}/{{ item.path }}'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  with_community.general.filetree: templates/scripts/
  when: item.state == 'file'

# Run scripts via specified cron schedule
- name: Cron to run ansible-pull frequently
  ansible.builtin.cron:
    name: "ansible-pull"
    job: "{{ ansiblepull_workdir }}/{{ ansiblepull_script_name }}"
    state: present
    minute: "{{ ansiblepull_cron_minute }}"
    hour: "{{ ansiblepull_cron_hour }}"
  when: ansiblepull_install_pull_cron

# Pull after wake
- name: Create ansible-pull-after-wake.service
  become: true
  ansible.builtin.template:
    src: ansible-pull-after-wake.service
    dest: /etc/systemd/system/ansible-pull-after-wake.service
    owner: root
    group: root
    mode: "0664"
  when: ansiblepull_run_after_wake

- name: Make sure ansible-pull-after-wake.service service is running
  become: true
  ansible.builtin.systemd_service:
    state: started
    name: ansible-pull-after-wake.service
    enabled: true
    no_block: true
  when: ansiblepull_run_after_wake
