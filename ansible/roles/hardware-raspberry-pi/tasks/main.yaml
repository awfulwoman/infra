# Adds additional provisions for a Raspberry Pi

# Determine boot config file location
# Raspbian = /boot/config.txt
# Ubuntu = /boot/firmware/usercfg.txt
- name: Ensure boot config file exists
  become: true
  ansible.builtin.copy:
    content: ""
    dest: "{{ raspberry_pi_boot_config_location }}"
    force: false
    group: root
    owner: root
    mode: "0644"

# Wifi hardware status
- name: Ensure wifi hardware is disabled
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-wifi'
    state: present
  when: raspberry_pi_wifi is false

- name: Ensure wifi hardware is enabled
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-wifi'
    state: absent
  when: raspberry_pi_wifi is true

# Bluetooth hardware status
- name: Ensure Bluetooth hardware is disabled
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-bt'
    state: present
  when: raspberry_pi_bluetooth is false

- name: Ensure Bluetooth hardware is enabled
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ raspberry_pi_boot_config_location }}"
    line: 'dtoverlay=disable-bt'
    state: absent
  when: raspberry_pi_bluetooth is true


- name: Ensure Raspi-config exists
  become: true
  ansible.builtin.apt:
    name:
      - raspi-config
      - build-essential
    state: present


- name: Ensure I2C apt packages are installed
  become: true
  ansible.builtin.apt:
    name:
      - python3-rpi.gpio
      - python3-luma.oled
      - python3-pil
      - i2c-tools
    state: present
  when: raspberry_pi_i2c and raspberry_pi_oled

- name: Get I2C status
  ansible.builtin.shell: "raspi-config nonint get_i2c"
  register: i2c_status 
  changed_when: false

- name: Enable I2C
  become: true
  ansible.builtin.shell: "raspi-config nonint do_i2c 0"
  when: (raspberry_pi_i2c == true) and (i2c_status.stdout != '0')
  # Get status and compare it against what should be done to prevent unnecessary changes

- name: Disable I2C
  become: true
  ansible.builtin.shell: "raspi-config nonint do_i2c 1"
  when: (raspberry_pi_i2c == false) and (i2c_status.stdout != '1')
  # Yes, "1" means "not endabled" in raspi-config

- name: Get SPI status
  ansible.builtin.shell: "raspi-config nonint get_spi"
  register: spi_status
  changed_when: false

- name: Enable SPI
  become: true
  ansible.builtin.shell: "raspi-config nonint do_spi 0"
  when: (raspberry_pi_spi == true) and (spi_status.stdout != '0')

- name: Disable SPI
  become: true
  ansible.builtin.shell: "raspi-config nonint do_spi 1"
  when: (raspberry_pi_spi == false) and (spi_status.stdout != '1')
