# Provisions an Ubuntu machine
- name: Ensure Github ssh keys are present
  become: true
  ansible.posix.authorized_key:
    user: "{{ ansible_user }}"
    key: https://github.com/awfulwoman.keys
    state: present

- name: Ensure timezone is for Berlin
  become: true
  community.general.timezone:
    name: "{{ bootstrap_ubuntu_timezone }}"

- name: Ensure localisation files for '{{ config_system_locale }}' are available
  become: true
  locale_gen:
    name: "{{ config_system_locale }}"
    state: present

- name: Ensure localisation files for '{{ config_system_language }}' are available
  become: true
  locale_gen:
    name: "{{ config_system_language }}"
    state: present

- name: Get current locale and language configuration
  become: true
  ansible.builtin.command: localectl status
  register: locale_status
  changed_when: false

- name: Parse 'LANG' from current locale and language configuration
  become: true
  ansible.builtin.set_fact:
    locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | first }}"

- name: Parse 'LANGUAGE' from current locale and language configuration
  become: true
  ansible.builtin.set_fact:
    locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"

- name: Configure locale to '{{ config_system_locale }}' and language to '{{ config_system_language }}'
  become: true
  ansible.builtin.command: localectl set-locale LANG={{ config_system_locale }} LANGUAGE={{ config_system_language }}
  changed_when: locale_lang != config_system_locale or locale_language != config_system_language

- name: Ensure hostname is correct
  become: true
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Ensure 127.0.1.1 is correct
  become: true
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: "127.0.1.1 {{ inventory_hostname }}"

- name: Upgrade apt packages
  become: true
  ansible.builtin.apt:
    upgrade: full
    update_cache: true

- name: Install necessary apt packages
  become: true
  ansible.builtin.apt:
    name:
      - curl
      - dirmngr
      - ffmpeg
      - git
      - htop
      - iptables
      - lm-sensors
      - mosh
      - neofetch
      - pipx
      - python-is-python3
      - python3
      - python3-docker
      - python3-pip
      - restic
      - retry
      - smartmontools
      - sqlite3
      - timg
      - tmux
      - unzip
      - uptimed
      - vim
      - wget
      - zsh
    state: present

- name: Autoremove apt packages
  become: true
  ansible.builtin.apt:
    autoremove: true

- name: Install pip packages via pipx
  community.general.pipx:
    name: "{{ item }}"
  loop: 
    - terminaltexteffects

- name: Env vars
  ansible.builtin.include_role:
    name: weareinteractive.environment
  vars:
    ansible_become: true
    no_log: true

- name: Awful guy geerling 
  ansible.builtin.include_role:
    name: geerlingguy.security
  vars:
    ansible_become: true
    security_fail2ban_enabled: false

- name: MOTD
  ansible.builtin.include_role:
    name: configure-motd
  vars:
    ansible_become: true

- name: Tailscale
  ansible.builtin.include_role:
    name: artis3n.tailscale
  when: tailscale_exit_node is undefined

- name: Tailscale - with exit node
  ansible.builtin.include_role:
    name: artis3n.tailscale
  vars:
    tailscale_args: "set --advertise-exit-node"
  when: tailscale_exit_node is defined and tailscale_exit_node is true

- name: "Allow the {{ ansible_user }} user to sudo rsync with no password"
  become: true
  community.general.sudoers:
    name: allow-sudo-rsync-no-password
    state: present
    user: "{{ ansible_user }}"
    nopassword: true
    commands: /usr/bin/rsync
