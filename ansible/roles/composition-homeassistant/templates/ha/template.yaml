# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# IMPORTANT NOTE! 
# Because we deploy this file via Ansible we must wrap all blocks of 
# Jinja templates in raw blocks to prevent Ansible from greedily 
# interpreting those cute curly brackets for itself. Yeah, we're 
# templating templates here. 
#
# *Inception theme plays, disconcertingly*
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# -------------------------------------------------------------------
# WET BULB CALCULATIONS
# -------------------------------------------------------------------
# Source: Roland Stull (2011) "Wet-Bulb Temperature from Relative 
# Humidity and Air Temperature"
# - Journal of Applied Meteorology and Climatology, Vol. 50, No. 11
# Formula: 
# Tw = T × arctan[0.151977(RH% + 8.313659)^1/2] 
# + arctan(T + RH%) - arctan(RH% - 1.676331) 
# + 0.00391838(RH%)^3/2×arctan(0.023101×RH%) - 4.686035
# -------------------------------------------------------------------
- sensor:
  - name: "Outdoors Wet Bulb Temperature"
    unique_id: outdoors_wet_bulb_temperature
    device_class: temperature
    unit_of_measurement: °C
    state_class: Measurement
    state: >
{%- raw %}
      {% set T = states('sensor.outdoors_atmosphere_temperature') | float %}
      {% set RH = states('sensor.outdoors_atmosphere_humidity') | float %}
      {% if T is not none and RH is not none %}
        {% set pi = 3.14159265359 %}
        {% set atan = (0.151977 * ((RH + 8.313659) ** 0.5)) | atan %}
        {% set atan2 = (T + RH) | atan %}
        {% set atan3 = (RH - 1.676331) | atan %}
        {% set atan4 = (0.023101 * RH) | atan %}
        {% set Tw = T * atan + atan2 - atan3 + 0.00391838 * (RH ** 1.5) * atan4 - 4.686035 %}
        {{ Tw | round(2) }}
      {% else %}
        Unavailable
      {% endif %}
{% endraw %}

- sensor:
  - name: "Outdoors Wet Bulb Status"
    unique_id: outdoors_wet_bulb_status
    state: >
{%- raw %}
      {% set temp = states('sensor.outdoors_wet_bulb_temperature') | float(1) %}
      {% if temp < 25 %}
        Extremely Safe
      {% elif temp >= 25.1 and temp < 27.7 %}
        Safe
      {% elif temp >= 27.8 and temp < 29.4 %}
        Caution
      {% elif temp >= 29.5 and temp < 31.6 %}
        Danger
      {% else %}
        Extreme Danger
      {% endif %}
{% endraw %}
    icon: >
{%- raw %}
      {% set temp = states('sensor.outdoors_wet_bulb_temperature') | float(1) %}
      {% if temp < 25 %}
        mdi:emoticon-excited-outline
      {% elif temp >= 25.1 and temp < 27.7 %}
        mdi:emoticon-happy-outline
      {% elif temp >= 27.8 and temp < 29.4 %}
        mdi:emoticon-neutral-outline
      {% elif temp >= 29.5 and temp < 31.6 %}
        mdi:emoticon-sad-outline
      {% else %}
        mdi:emoticon-dead-outline
      {% endif %}
{% endraw %}
    attributes:
{%- raw %}
      wet_bulb_temperature: "{{ states('sensor.outdoors_wet_bulb_temperature') }}"
      temperature_unit: "{{ state_attr('sensor.outdoors_wet_bulb_temperature', 'unit_of_measurement') }}"
{% endraw %}

# -------------------------------------------------------------------
# AREA MOTION SENSORS VIA LABELS
# -------------------------------------------------------------------
# If you're looking at this in the repo them remember that Ansible
# creates the Home Assistant Jinja2 template via a loop.
# Inception, remember?
# See the Areas dictionary in defaults/main.yaml for area names.
# -------------------------------------------------------------------

{% for key, value in areas.items() %}

- binary_sensor:
  - name: "{{ value }} Area Motion"
    variables:
      target_label_1: "device: Motion Sensor"
      target_label_2: "importance: Primary"
      target_area: "{{ value }}"
    unique_id: "{{ key }}_area_motion"
    device_class: "motion"
    state: >
{%- raw %}
      {% set label_sensors_1 = label_entities(target_label_1) | select('match', 'binary_sensor\.') | list %}
      {% set label_sensors_2 = label_entities(target_label_2) | select('match', 'binary_sensor\.') | list %}
      {% set combined_label_sensors = (label_sensors_1 + label_sensors_2 ) | unique | list %}
      {% set area_sensors = area_entities(target_area) | select('match', 'binary_sensor\.') | list %}
      {% set combined_sensors = (combined_label_sensors + area_sensors) | unique | list %}
      {% if combined_sensors | count > 0 %}
        {% set active_count = combined_sensors | map('states') | select('eq', 'on') | list | count %}
        {{ true if active_count > 0 else false }}
      {% else %}
        false
      {% endif %}
    attributes:
      labels_used: "{{ target_label_1 }}, {{ target_label_2 }}"
{% endraw %}

{% endfor %}


