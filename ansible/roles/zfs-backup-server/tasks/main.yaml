---
- name: Install ZFS backup tooling
  become: true
  ansible.builtin.apt:
    name:
      - zfsutils-linux
      - sanoid
      - acl
      - moreutils # for ts (timestamp) util
      - lzop
      - mbuffer
    state: present

- name: Publish backup server public key as fact
  ansible.builtin.set_fact:
    public_key: "{{ vault_zfsbackups_public_key }}"

- name: Ensure backups pool exists
  become: true
  community.general.zfs:
    name: "{{ zfsbackup_poolname }}"
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa

# - name: Allow non-sudo account to do ZFS things
#   become: true
#   community.general.zfs_delegate_admin:
#     name: "{{ zfsbackup_poolname }}"
#     users: "{{ ansible_user }}"
#     descendents: true
#     state: absent
#     permissions: compression,mountpoint,create,mount,receive,rollback,snapshot,hold,release,destroy,xattr,acltype,rename

- name: Create dataset list
  ansible.builtin.set_fact:
    datasets: []

- name: Construct a list of datasets to create
  ansible.builtin.set_fact:
    datasets: "{{ datasets + _result }}"
  loop: "{{ query('inventory_hostnames', 'zfs-backup-clients') }}"
  vars:
    _host_datasets: "{{ hostvars[item].zfs_backup_datasets }}"
    _result: "{{ [item + '/'] | product(_host_datasets) | map('join') | list }}"

- name: Show value of dataset_names
  ansible.builtin.debug:
    var: datasets

- name: Ensure a dataset for each dataset of each backup client is present
  become: true
  community.general.zfs:
    name: "{{ zfsbackup_poolname }}/{{ item }}"
    state: present
    extra_zfs_properties:
      acltype: posix
      xattr: sa
      # mountpoint: none
  loop: "{{ datasets }}"

# - name: "Ensure {{ zfsbackup_poolmountpoint }} mountpoint is owned by {{ ansible_user }}"
#   become: true
#   ansible.builtin.file:
#     path: "{{ zfsbackup_poolmountpoint }}"
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     state: directory
#     mode: 0774
#     recurse: true

# - name: "Ensure ZFS pools are owned by {{ ansible_user }}"
#   become: true
#   ansible.builtin.file:
#     path: "/{{ item }}"
#     state: directory
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: 0774
#   loop: "{{ zfs_datasets }}"
#   when: zfs_datasets is defined

- name: Generate and deploy backup script dir
  become: true
  ansible.builtin.file:
    path: "/opt/zfsbackup"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0774

- name: Generate and deploy backup script
  become: true
  ansible.builtin.template:
    src: templates/pull-zfs-backups.sh.j2
    dest: "{{ zfsbackup_script_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0774
    
#Â uh oh now doesn't work. see https://unix.stackexchange.com/questions/374093/why-doesnt-sudo-sh-source-profile-d-scripts
- name: Add script to system-wide $PATH
  become: true
  ansible.builtin.copy:
    dest: /etc/profile.d/custom-path-zfs-backup.sh
    content: 'PATH=$PATH:{{ zfsbackup_script_path | dirname }}'

# - name: Cron to run zfs-backup
#   # Runs at a specified time to catch reboots and previous backup failures
#   become: true
#   ansible.builtin.cron:
#     name: "backup.sh"
#     job: "{{ zfsbackup_script_path }}"
#     state: present
#     minute: "{{ zfsbackup_cron_minute }}"
#     hour: "{{ zfsbackup_cron_hour }}"

- name: "Allow the {{ ansible_user }} user to sudo {{ zfsbackup_script_path }} with no password"
  become: true
  community.general.sudoers:
    name: allow-zfsbackup
    state: present
    user: "{{ ansible_user }}"
    nopassword: true
    commands: "{{ zfsbackup_script_path }}"

- name: Ensure .ssh directory exists
  ansible.builtin.file: 
    dest: "/home/{{ ansible_user}}/.ssh"
    mode: 0700 
    owner: "{{ ansible_user}}"
    group: "{{ ansible_user}}"
    state: directory

- name: Install ssh key
  ansible.builtin.copy: 
    content: "{{ vault_zfsbackups_privatekey_b64 | b64decode }}" 
    dest: "/home/{{ ansible_user}}/.ssh/id_rsa"
    mode: 0600
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user}}"

# temp?
- name: Ensure .ssh directory exists ROOT
  become: true
  ansible.builtin.file: 
    dest: "/root/.ssh"
    mode: 0700 
    owner: root
    group: root
    state: directory

- name: Install ssh key ROOT
  become: true
  ansible.builtin.copy: 
    content: "{{ vault_zfsbackups_privatekey_b64 | b64decode }}" 
    dest: "/root/.ssh/id_rsa"
    mode: 0600
    owner: root
    group: root

- name: Allow the user to sudo /usr/sbin/syncoid with no password
  become: true
  community.general.sudoers:
    name: allow-syncoid
    state: present
    user: "{{ ansible_user }}"
    nopassword: true
    commands: /usr/sbin/syncoid

- name: Create pull-zfs-backups-after-wake.service
  become: true
  ansible.builtin.template:
    src: pull-zfs-backups-after-wake.service
    dest: /etc/systemd/system/pull-zfs-backups-after-wake.service
    owner: root
    group: root
    mode: 0664
  when: zfsbackup_run_after_wake

- name: Make sure pull-zfs-backups-after-wake service is running
  become: true
  ansible.builtin.systemd_service:
    state: started
    name: pull-zfs-backups-after-wake
    enabled: true
    no_block: true
  when: zfsbackup_run_after_wake
