# Bootstraps an Ubuntu machine

- name: Naming facts
  ansible.builtin.debug:
    msg: |
      * Inventory hostname
        inventory_hostname: "{{ inventory_hostname }}"
        Obtained from the Ansible inventory configuration. Can be different than the machine's hostname.
      * Ansible's hostname
        ansible_hostname: "{{ ansible_hostname }}"
        Obtained via gather_facts. Short version of the hostname.
      * Ansible's FQDN
        ansible_fqdn: "{{ ansible_fqdn }}"
        Obtained via gather_facts. Long version of the hostname, including the domain.
      * Ansible connection address
        ansible_host: "{{ ansible_host }}"
        The IP address or hostname used to connect to the machine. Can be different than the machine's hostname.
      * Default IP address
        ansible_default_ipv4.address: "{{ ansible_default_ipv4.address }}"
        The default IPv4 address of the machine, used for network communication.

- name: Ensure core apt packages are installed
  become: true
  ansible.builtin.apt:
    name:
      - util-linux-extra
      - curl
      - dirmngr
      - e2fsprogs
      - ffmpeg
      - git
      - htop
      - iptables
      - lm-sensors
      - mosh
      - neofetch
      - python-is-python3
      - python3
      - python3-docker
      - python3-pip
      - python3-virtualenv
      - restic
      - retry
      - smartmontools
      - sqlite3
      - timg
      - tmux
      - unzip
      - uptimed
      - vim
      - wget
      - zsh
    state: present

- name: Ensure Github SSH keys are present
  become: true
  ansible.posix.authorized_key:
    user: "{{ ansible_user }}"
    key: https://github.com/awfulwoman.keys
    comment: github.com/awfulwoman
    state: present

- name: Ensure user has bash as default shell
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    shell: /bin/bash

- name: Ensure timezone is correct
  become: true
  community.general.timezone:
    name: "{{ bootstrap_ubuntu_timezone }}"

- name: Ensure locale files are available
  become: true
  community.general.locale_gen:
    name: "{{ config_system_locale }}"
    state: present

- name: Ensure language files are available
  become: true
  community.general.locale_gen:
    name: "{{ config_system_language }}"
    state: present

- name: Get current locale and language configuration
  become: true
  ansible.builtin.command: localectl status
  register: locale_status
  changed_when: false

- name: Parse 'LANG' from current locale and language configuration
  become: true
  ansible.builtin.set_fact:
    locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | first }}"

- name: Parse 'LANGUAGE' from current locale and language configuration
  become: true
  ansible.builtin.set_fact:
    locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"

- name: Configure locale and language
  become: true
  ansible.builtin.command: localectl set-locale LANG={{ config_system_locale }} LANGUAGE={{ config_system_language }}
  changed_when: locale_lang != config_system_locale or locale_language != config_system_language

- name: Ensure hostname is correct
  become: true
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Ensure 127.0.1.1 is correct
  become: true
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: "127.0.1.1 {{ inventory_hostname }}"

- name: Ensure PPAs are present
  become: true
  ansible.builtin.apt_repository:
    repo: "{{ ppa_item }}"
    codename: "{{ ansible_distribution_release }}"
    update_cache: true
  loop_control:
    loop_var: ppa_item
  loop:
    - ppa:m-grant-prg/utils
    - ppa:tomtomtom/yt-dlp

- name: Upgrade apt packages
  become: true
  ansible.builtin.apt:
    upgrade: full
    update_cache: true

- name: Autoremove apt packages
  become: true
  ansible.builtin.apt:
    autoremove: true

- name: Ensure Python dir exists
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ pip_basepath }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"

- name: Ensure Python venv dir exists
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ pip_virtualenv_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"

- name: Ensure Python requirements file exists
  ansible.builtin.copy:
    content: ""
    force: false
    dest: "{{ pip_requirements_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"

- name: Env vars
  no_log: true
  ansible.builtin.include_role:
    name: weareinteractive.environment
  vars:
    ansible_become: true

- name: That awful guy geerling
  ansible.builtin.include_role:
    name: geerlingguy.security
  vars:
    ansible_become: true
    security_fail2ban_enabled: false

- name: MOTD
  ansible.builtin.include_role:
    name: system-motd
  vars:
    ansible_become: true

- name: Tailscale
  ansible.builtin.include_role:
    name: artis3n.tailscale.machine
  when: tailscale_exit_node is undefined

- name: Tailscale - with exit node
  ansible.builtin.include_role:
    name: artis3n.tailscale.machine
  vars:
    tailscale_args: "--advertise-exit-node"
  when: tailscale_exit_node is defined and tailscale_exit_node is true

- name: "Allow the user to sudo rsync with no password"
  become: true
  community.general.sudoers:
    name: allow-sudo-rsync-no-password
    state: present
    user: "{{ ansible_user }}"
    nopassword: true
    commands: /usr/bin/rsync
